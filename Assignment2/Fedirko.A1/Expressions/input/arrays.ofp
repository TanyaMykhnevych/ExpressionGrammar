# arrays.ofp

void main() {
	int[] a = new int[10];
	int i = 0;
	int n = 2; 
	while (i < a.length) {
		a[i] = n;
		n = 2*n;
		i = i + 1;
	} 
	
	int[] rev = reverse(a);
	printArray(rev);
	
	float[] f = {9.3,8.8,17.5,1.0,2.1,3.2, 4.4};
	println(f[0]);   # 9.3
	float max = findMax(f);
	println(max);    # 17.5
	selectionSort(f);
	println(f[f.length-1]);  # print last ==> also 17.5
}

int[] reverse(int[] arr) {
	int sz = arr.length;
	int[] toReturn = new int[sz];
	int i = 0;
	int n = 2; 
	while (i < sz) {
		int n = arr[sz-i-1];
		toReturn[i] = n;
		i = i + 1;
	} 
	return toReturn;
}

void printArray(int[] arr) {
	print(arr[0]);   # First element
	int i = 0;
	while(i<arr.length) {
		int n = arr[i];
		print(" ");
		print(n);
		i = i + 1;
	}
	println("");
}

float findMax(float[] f) {
	float max = f[0];
	int i=1;
	while (i<f.length) {
		float p = f[i];
		if (p>max) {
			max = p;
		}
		i = i + 1;
	}
	
	return max;
}

void selectionSort(float[] arr){  
	int i = 0;
    while (i < arr.length - 1)  {  
        int smallest = i;  
        int j = i+1;
        while (j < arr.length){  
            if (arr[j] < arr[smallest]){  
                smallest = j;    # searching for lowest index  
            } 
            j = j+1; 
        }  
        # Swap
        float smallestNumber = arr[smallest];   
        arr[smallest] = arr[i];  
        arr[i] = smallestNumber; 
        i = i+1; 
    }  
}  
